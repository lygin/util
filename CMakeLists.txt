# this is the build file for project 
# it is autogenerated by the xmake build system.
# do not edit by hand.

# project
cmake_minimum_required(VERSION 3.15.0)
cmake_policy(SET CMP0091 NEW)
project(client LANGUAGES CXX C)

# target
add_executable(client "")
set_target_properties(client PROPERTIES OUTPUT_NAME "client")
set_target_properties(client PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/linux/x86_64/release")
target_compile_options(client PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-m64>
    $<$<COMPILE_LANGUAGE:CXX>:-m64>
    $<$<COMPILE_LANGUAGE:C>:-O3 -Og -std=c++14>
    $<$<COMPILE_LANGUAGE:CXX>:-O3 -Og -std=c++14>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
if(MSVC)
    target_compile_options(client PRIVATE $<$<CONFIG:Release>:-Ox -fp:fast>)
else()
    target_compile_options(client PRIVATE -O3)
endif()
if(MSVC)
else()
    target_compile_options(client PRIVATE -fvisibility=hidden)
endif()
if(MSVC)
    set_property(TARGET client PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(client PRIVATE
    event_core
    event_extra
    event_openssl
    event_pthreads
    event
)
target_link_options(client PRIVATE
    -m64
)
target_sources(client PRIVATE
    libevent-client/client.cc
)

# target
add_library(liblz4 STATIC "")
set_target_properties(liblz4 PROPERTIES OUTPUT_NAME "liblz4")
set_target_properties(liblz4 PROPERTIES ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/linux/x86_64/release")
target_compile_options(liblz4 PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-m64>
    $<$<COMPILE_LANGUAGE:CXX>:-m64>
    $<$<COMPILE_LANGUAGE:C>:-O3 -Og -std=c++14>
    $<$<COMPILE_LANGUAGE:CXX>:-O3 -Og -std=c++14>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
if(MSVC)
    target_compile_options(liblz4 PRIVATE $<$<CONFIG:Release>:-Ox -fp:fast>)
else()
    target_compile_options(liblz4 PRIVATE -O3)
endif()
if(MSVC)
else()
    target_compile_options(liblz4 PRIVATE -fvisibility=hidden)
endif()
if(MSVC)
    set_property(TARGET liblz4 PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_sources(liblz4 PRIVATE
    lz4/lz4.c
)

# target
add_executable(lz4test "")
set_target_properties(lz4test PROPERTIES OUTPUT_NAME "lz4test")
set_target_properties(lz4test PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/linux/x86_64/release")
add_dependencies(lz4test liblz4)
target_compile_options(lz4test PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-m64>
    $<$<COMPILE_LANGUAGE:CXX>:-m64>
    $<$<COMPILE_LANGUAGE:C>:-O3 -Og -std=c++14>
    $<$<COMPILE_LANGUAGE:CXX>:-O3 -Og -std=c++14>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
if(MSVC)
    target_compile_options(lz4test PRIVATE $<$<CONFIG:Release>:-Ox -fp:fast>)
else()
    target_compile_options(lz4test PRIVATE -O3)
endif()
if(MSVC)
else()
    target_compile_options(lz4test PRIVATE -fvisibility=hidden)
endif()
if(MSVC)
    set_property(TARGET lz4test PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(lz4test PRIVATE
    liblz4
)
target_link_directories(lz4test PRIVATE
    build/linux/x86_64/release
)
target_link_options(lz4test PRIVATE
    -m64
)
target_sources(lz4test PRIVATE
    lz4/lz4_test.c
)

# target
add_executable(redis-async "")
set_target_properties(redis-async PROPERTIES OUTPUT_NAME "redis-async")
set_target_properties(redis-async PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/linux/x86_64/release")
target_include_directories(redis-async PRIVATE
    /usr/include/hiredis
)
target_compile_options(redis-async PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-m64>
    $<$<COMPILE_LANGUAGE:CXX>:-m64>
    $<$<COMPILE_LANGUAGE:C>:-O3 -Og -std=c++14>
    $<$<COMPILE_LANGUAGE:CXX>:-O3 -Og -std=c++14>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
if(MSVC)
    target_compile_options(redis-async PRIVATE $<$<CONFIG:Release>:-Ox -fp:fast>)
else()
    target_compile_options(redis-async PRIVATE -O3)
endif()
if(MSVC)
else()
    target_compile_options(redis-async PRIVATE -fvisibility=hidden)
endif()
if(MSVC)
    set_property(TARGET redis-async PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(redis-async PRIVATE
    hiredis
    event_core
    event_extra
    event_openssl
    event_pthreads
    event
)
target_link_options(redis-async PRIVATE
    -m64
)
target_sources(redis-async PRIVATE
    redis/libevent-hiredis-async.cc
)

# target
add_executable(redis-pipeline "")
set_target_properties(redis-pipeline PROPERTIES OUTPUT_NAME "redis-pipeline")
set_target_properties(redis-pipeline PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/linux/x86_64/release")
target_include_directories(redis-pipeline PRIVATE
    /usr/include/hiredis
)
target_compile_options(redis-pipeline PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-m64>
    $<$<COMPILE_LANGUAGE:CXX>:-m64>
    $<$<COMPILE_LANGUAGE:C>:-O3 -Og -std=c++14>
    $<$<COMPILE_LANGUAGE:CXX>:-O3 -Og -std=c++14>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
if(MSVC)
    target_compile_options(redis-pipeline PRIVATE $<$<CONFIG:Release>:-Ox -fp:fast>)
else()
    target_compile_options(redis-pipeline PRIVATE -O3)
endif()
if(MSVC)
else()
    target_compile_options(redis-pipeline PRIVATE -fvisibility=hidden)
endif()
if(MSVC)
    set_property(TARGET redis-pipeline PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(redis-pipeline PRIVATE
    hiredis
)
target_link_options(redis-pipeline PRIVATE
    -m64
)
target_sources(redis-pipeline PRIVATE
    redis/hiredis-pipeline.cc
)

# target
add_executable(rocksdb "")
set_target_properties(rocksdb PROPERTIES OUTPUT_NAME "rocksdb")
set_target_properties(rocksdb PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/linux/x86_64/release")
target_include_directories(rocksdb PRIVATE
    cxx_utils
)
target_compile_options(rocksdb PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-m64>
    $<$<COMPILE_LANGUAGE:CXX>:-m64>
    $<$<COMPILE_LANGUAGE:C>:-O3 -Og -std=c++14>
    $<$<COMPILE_LANGUAGE:CXX>:-O3 -Og -std=c++14>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
if(MSVC)
    target_compile_options(rocksdb PRIVATE $<$<CONFIG:Release>:-Ox -fp:fast>)
else()
    target_compile_options(rocksdb PRIVATE -O3)
endif()
if(MSVC)
else()
    target_compile_options(rocksdb PRIVATE -fvisibility=hidden)
endif()
if(MSVC)
    set_property(TARGET rocksdb PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(rocksdb PRIVATE
    rocksdb
    leveldb
    memenv
)
target_link_directories(rocksdb PRIVATE
    /usr/lib
    /usr/lib/x86_64-linux-gnu
)
target_link_options(rocksdb PRIVATE
    -m64
)
target_sources(rocksdb PRIVATE
    rocksdb/simple_example.cc
)

# target
add_executable(server "")
set_target_properties(server PROPERTIES OUTPUT_NAME "server")
set_target_properties(server PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/linux/x86_64/release")
add_custom_command(OUTPUT output_server_56477905
    COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_SOURCE_DIR}/build/.gens/server/linux/x86_64/release/rules/protobuf/libevent-server
    COMMAND /home/lj/.xmake/packages/p/protobuf-cpp/3.19.4/b2115fa005c149c3a814138eccc0044e/bin/protoc ${CMAKE_SOURCE_DIR}/libevent-server/a.proto -I${CMAKE_SOURCE_DIR}/libevent-server --cpp_out=${CMAKE_SOURCE_DIR}/build/.gens/server/linux/x86_64/release/rules/protobuf/libevent-server
    COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_SOURCE_DIR}/build/.objs/server/linux/x86_64/release/gens/rules/protobuf/libevent-server
    COMMAND /usr/bin/gcc -c -m64 -fvisibility=hidden -fvisibility-inlines-hidden -O3 -isystem /home/lj/.xmake/packages/p/protobuf-cpp/3.19.4/b2115fa005c149c3a814138eccc0044e/include -O3 -Og -std=c++14 -DNDEBUG -std=c++11 -I${CMAKE_SOURCE_DIR}/build/.gens/server/linux/x86_64/release/rules/protobuf/libevent-server -o ${CMAKE_SOURCE_DIR}/build/.objs/server/linux/x86_64/release/gens/rules/protobuf/libevent-server/a.pb.cc.o ${CMAKE_SOURCE_DIR}/build/.gens/server/linux/x86_64/release/rules/protobuf/libevent-server/a.pb.cc
    VERBATIM
)
add_custom_target(target_server_56477905
    DEPENDS output_server_56477905
)
add_dependencies(server target_server_56477905)
target_include_directories(server PRIVATE
    build/.gens/server/linux/x86_64/release/rules/protobuf/libevent-server
)
target_include_directories(server PRIVATE
    /home/lj/.xmake/packages/p/protobuf-cpp/3.19.4/b2115fa005c149c3a814138eccc0044e/include
)
target_compile_options(server PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-m64>
    $<$<COMPILE_LANGUAGE:CXX>:-m64>
    $<$<COMPILE_LANGUAGE:C>:-O3 -Og -std=c++14>
    $<$<COMPILE_LANGUAGE:CXX>:-O3 -Og -std=c++14>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
if(MSVC)
    target_compile_options(server PRIVATE $<$<CONFIG:Release>:-Ox -fp:fast>)
else()
    target_compile_options(server PRIVATE -O3)
endif()
if(MSVC)
else()
    target_compile_options(server PRIVATE -fvisibility=hidden)
endif()
if(MSVC)
    set_property(TARGET server PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(server PRIVATE
    protobuf
    event_core
    event_extra
    event_openssl
    event_pthreads
    event
    pthread
)
target_link_libraries(server PRIVATE
    ${CMAKE_SOURCE_DIR}/build/.objs/server/linux/x86_64/release/gens/rules/protobuf/libevent-server/a.pb.cc.o
)
target_link_directories(server PRIVATE
    /home/lj/.xmake/packages/p/protobuf-cpp/3.19.4/b2115fa005c149c3a814138eccc0044e/lib
)
target_link_options(server PRIVATE
    -m64
)
target_sources(server PRIVATE
    libevent-server/server.cc
)

# target
add_executable(tbb "")
set_target_properties(tbb PROPERTIES OUTPUT_NAME "tbb")
set_target_properties(tbb PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/linux/x86_64/release")
target_compile_options(tbb PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-m64>
    $<$<COMPILE_LANGUAGE:CXX>:-m64>
    $<$<COMPILE_LANGUAGE:C>:-O3 -Og -std=c++14>
    $<$<COMPILE_LANGUAGE:CXX>:-O3 -Og -std=c++14>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
if(MSVC)
    target_compile_options(tbb PRIVATE $<$<CONFIG:Release>:-Ox -fp:fast>)
else()
    target_compile_options(tbb PRIVATE -O3)
endif()
if(MSVC)
else()
    target_compile_options(tbb PRIVATE -fvisibility=hidden)
endif()
if(MSVC)
    set_property(TARGET tbb PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(tbb PRIVATE
    tbb
    atomic
)
target_link_options(tbb PRIVATE
    -m64
)
target_sources(tbb PRIVATE
    tbb/tbb_hashmap.cc
)

# target
add_executable(zlibtest "")
set_target_properties(zlibtest PROPERTIES OUTPUT_NAME "zlibtest")
set_target_properties(zlibtest PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/linux/x86_64/release")
target_compile_options(zlibtest PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-m64>
    $<$<COMPILE_LANGUAGE:CXX>:-m64>
    $<$<COMPILE_LANGUAGE:C>:-O3 -Og -std=c++14>
    $<$<COMPILE_LANGUAGE:CXX>:-O3 -Og -std=c++14>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
if(MSVC)
    target_compile_options(zlibtest PRIVATE $<$<CONFIG:Release>:-Ox -fp:fast>)
else()
    target_compile_options(zlibtest PRIVATE -O3)
endif()
if(MSVC)
else()
    target_compile_options(zlibtest PRIVATE -fvisibility=hidden)
endif()
if(MSVC)
    set_property(TARGET zlibtest PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(zlibtest PRIVATE
    z
)
target_link_options(zlibtest PRIVATE
    -m64
)
target_sources(zlibtest PRIVATE
    zlib/zlib_test.c
)

