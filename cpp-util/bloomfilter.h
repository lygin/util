/**
 * 布隆过滤器
 * 如果KeyMayMatch 返回false，则代表key一定不存在
 * 如果KeyMayMatch 返回true，key可能存在，存在具有一定的错误率，空间越大错误率越低
*/

#ifndef _BLOOM_FILTER_H_
#define _BLOOM_FILTER_H_

#include "murmur2.h"
#include "slice.h"

static uint32_t BloomHash(const Slice &key) {
  return Hash(key.data(), key.size(), 0xbc9f1d34);
}

class BloomFilter {
public:
  //默认10，~1%错误率
  explicit BloomFilter(int bits_per_key = 10) : bits_per_key_(bits_per_key) {
    // We intentionally round down to reduce probing cost a little bit
    k_ = static_cast<size_t>(bits_per_key * 0.69); // 0.69 =~ ln(2)
    if (k_ < 1)
      k_ = 1;
    if (k_ > 30)
      k_ = 30;
  }

  void CreateFilter(const Slice *keys, int n, std::string *dst) {
    // Compute bloom filter size (in both bits and bytes)
    size_t bits = n * bits_per_key_;

    // For small n, we can see a very high false positive rate.  Fix it
    // by enforcing a minimum bloom filter length.
    if (bits < 64)
      bits = 64;

    size_t bytes = (bits + 7) / 8; //需要多少B
    bits = bytes * 8;

    const size_t init_size = dst->size();
    dst->resize(init_size + bytes, 0);
    dst->push_back(static_cast<char>(k_)); // Remember # of probes in filter
    char *array = &(*dst)[init_size];
    //依此处理每个键
    for (int i = 0; i < n; i++) {
      // Use double-hashing to generate a sequence of hash values.
      // See analysis in [Kirsch,Mitzenmacher 2006].
      uint32_t h = BloomHash(keys[i]);
      //通过哈希值的移位计算delta
      const uint32_t delta = (h >> 17) | (h << 15); // Rotate right 17 bits
      //理论上需要对每个key计算k_次hash，此处通过对哈希值加delta模拟
      for (size_t j = 0; j < k_; j++) {
        const uint32_t bitpos = h % bits; //%bits是为了将哈希值保证在范围内
        array[bitpos / 8] |= (1 << (bitpos % 8)); //将对应位 置为1
        h += delta;                               //模拟下一个hash
      }
    }
  }
  // 由于没有增加空间，所以添加key会使错误率变高（最好不要使用该接口）
  void SetKey(const Slice &key, Slice &bloom_filter) {
    const size_t len = bloom_filter.size();
    if (len < 2)
      return;

    char *array = const_cast<char *>(bloom_filter.data());
    const size_t bits = (len - 1) * 8; //尾部是k_的值

    const size_t k = array[len - 1];
    if (k > 30) {
      // Reserved for potentially new encodings for short bloom filters.
      // Consider it a match.
      return;
    }
    uint32_t h = BloomHash(key);
    const uint32_t delta = (h >> 17) | (h << 15); // Rotate right 17 bits
    for (size_t j = 0; j < k; j++) {
      const uint32_t bitpos = h % bits;
      array[bitpos / 8] |= (1 << (bitpos % 8)); //将对应位 置为1
      h += delta;
    }
  }

  bool KeyMayMatch(const Slice &key, const Slice &bloom_filter) {
    const size_t len = bloom_filter.size();
    if (len < 2)
      return false;

    const char *array = bloom_filter.data();
    const size_t bits = (len - 1) * 8; //尾部是k_的值

    // Use the encoded k so that we can read filters generated by
    // bloom filters created using different parameters.
    const size_t k = array[len - 1];
    if (k > 30) {
      // Reserved for potentially new encodings for short bloom filters.
      // Consider it a match.
      return true;
    }

    uint32_t h = BloomHash(key);
    const uint32_t delta = (h >> 17) | (h << 15); // Rotate right 17 bits
    for (size_t j = 0; j < k; j++) {
      const uint32_t bitpos = h % bits;
      if ((array[bitpos / 8] & (1 << (bitpos % 8))) == 0)
        return false; // bitmap指定位为0一定不存在
      h += delta;
    }
    return true; //可能存在
  }

private:
  size_t bits_per_key_; //每个key的bits数
  size_t k_;            //哈希函数数量
};

#endif